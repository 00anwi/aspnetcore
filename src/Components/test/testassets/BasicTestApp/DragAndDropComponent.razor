@using Microsoft.AspNetCore.Components.Web.Extensions

<Drop TItem="Person" OnDrop="OnDropFirst">
    @foreach (var item in firstItemList)
    {
        <Drag Item="item" OnDragStart="OnDragStart">
            @item.Name
        </Drag>
        <br />
    }
</Drop>

<hr />

<Drop TItem="Person" OnDrop="OnDropSecond">
    @foreach (var item in secondItemList)
    {
        <Drag Item="item" OnDragStart="OnDragStart">
            @item.Name
        </Drag>
        <br />
    }
</Drop>

@code {
    private class Person
    {
        public string Name { get; }

        public Person(string name)
        {
            Name = name;
        }
    }

    readonly List<Person> firstItemList = new List<Person>()
    {
        new Person("Bob"),
        new Person("Jenny"),
        new Person("Christopher"),
    };

    readonly List<Person> secondItemList = new List<Person>()
    {
        new Person("Tom"),
        new Person("Jasmine"),
        new Person("Sarah"),
    };

    void OnDragStart(Person person, MutableDragEventArgs e)
    {
        e.DataTransfer.SetData("text/plain", person.Name);
    }

    void OnDropFirst(DropInfo<Person> dropInfo)
    {
        Console.WriteLine($"Data from .NET: {dropInfo.EventArgs.DataTransfer.GetData("text/plain")}");

        firstItemList.RemoveAll(p => dropInfo.Items.Contains(p));
        secondItemList.RemoveAll(p => dropInfo.Items.Contains(p));

        firstItemList.AddRange(dropInfo.Items);

        StateHasChanged();
    }

    void OnDropSecond(DropInfo<Person> dropInfo)
    {
        Console.WriteLine($"Data from .NET: {dropInfo.EventArgs.DataTransfer.GetData("text/plain")}");

        firstItemList.RemoveAll(p => dropInfo.Items.Contains(p));
        secondItemList.RemoveAll(p => dropInfo.Items.Contains(p));

        secondItemList.AddRange(dropInfo.Items);

        StateHasChanged();
    }
}
